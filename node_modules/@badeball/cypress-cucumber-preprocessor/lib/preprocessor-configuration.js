"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolve = exports.PreprocessorConfiguration = void 0;
const cosmiconfig_1 = require("cosmiconfig");
const util_1 = __importDefault(require("util"));
const debug_1 = __importDefault(require("./debug"));
const type_guards_1 = require("./type-guards");
function hasOwnProperty(value, property) {
    return Object.prototype.hasOwnProperty.call(value, property);
}
function validateConfigurationEntry(key, value) {
    switch (key) {
        case "stepDefinitions":
            if (!(0, type_guards_1.isStringOrStringArray)(value)) {
                throw new Error(`Expected a string or array of strings (stepDefinitions), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        case "messages": {
            if (typeof value !== "object" || value == null) {
                throw new Error(`Expected an object (messages), but got ${util_1.default.inspect(value)}`);
            }
            if (!hasOwnProperty(value, "enabled") ||
                typeof value.enabled !== "boolean") {
                throw new Error(`Expected a boolean (messages.enabled), but got ${util_1.default.inspect(value)}`);
            }
            let output;
            if (hasOwnProperty(value, "output")) {
                if ((0, type_guards_1.isString)(value.output)) {
                    output = value.output;
                }
                else {
                    throw new Error(`Expected a string (messages.output), but got ${util_1.default.inspect(value)}`);
                }
            }
            const messagesConfig = {
                enabled: value.enabled,
                output,
            };
            return { [key]: messagesConfig };
        }
        case "json": {
            if (typeof value !== "object" || value == null) {
                throw new Error(`Expected an object (json), but got ${util_1.default.inspect(value)}`);
            }
            if (!hasOwnProperty(value, "enabled") ||
                typeof value.enabled !== "boolean") {
                throw new Error(`Expected a boolean (json.enabled), but got ${util_1.default.inspect(value)}`);
            }
            let formatter;
            if (hasOwnProperty(value, "formatter")) {
                if ((0, type_guards_1.isString)(value.formatter)) {
                    formatter = value.formatter;
                }
                else {
                    throw new Error(`Expected a string (json.formatter), but got ${util_1.default.inspect(value)}`);
                }
            }
            let output;
            if (hasOwnProperty(value, "output")) {
                if ((0, type_guards_1.isString)(value.output)) {
                    output = value.output;
                }
                else {
                    throw new Error(`Expected a string (json.output), but got ${util_1.default.inspect(value)}`);
                }
            }
            const messagesConfig = {
                enabled: value.enabled,
                formatter,
                output,
            };
            return { [key]: messagesConfig };
        }
        case "filterSpecs": {
            if (!(0, type_guards_1.isBoolean)(value)) {
                throw new Error(`Expected a boolean (filterSpecs), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        }
        case "omitFiltered": {
            if (!(0, type_guards_1.isBoolean)(value)) {
                throw new Error(`Expected a boolean (omitFiltered), but got ${util_1.default.inspect(value)}`);
            }
            return { [key]: value };
        }
        default:
            return {};
    }
}
class PreprocessorConfiguration {
    constructor(explicitValues) {
        this.explicitValues = explicitValues;
    }
    get stepDefinitions() {
        var _a;
        return ((_a = this.explicitValues.stepDefinitions) !== null && _a !== void 0 ? _a : [
            "cypress/integration/[filepath]/**/*.{js,ts}",
            "cypress/integration/[filepath].{js,ts}",
            "cypress/support/step_definitions/**/*.{js,ts}",
        ]);
    }
    get messages() {
        var _a, _b, _c, _d;
        return {
            enabled: this.json.enabled || ((_b = (_a = this.explicitValues.messages) === null || _a === void 0 ? void 0 : _a.enabled) !== null && _b !== void 0 ? _b : false),
            output: (_d = (_c = this.explicitValues.messages) === null || _c === void 0 ? void 0 : _c.output) !== null && _d !== void 0 ? _d : "cucumber-messages.ndjson",
        };
    }
    get json() {
        var _a, _b, _c, _d, _e;
        return {
            enabled: (_b = (_a = this.explicitValues.json) === null || _a === void 0 ? void 0 : _a.enabled) !== null && _b !== void 0 ? _b : false,
            formatter: (_d = (_c = this.explicitValues.json) === null || _c === void 0 ? void 0 : _c.formatter) !== null && _d !== void 0 ? _d : "cucumber-json-formatter",
            output: ((_e = this.explicitValues.json) === null || _e === void 0 ? void 0 : _e.output) || "cucumber-report.json",
        };
    }
    get filterSpecs() {
        var _a;
        return (_a = this.explicitValues.filterSpecs) !== null && _a !== void 0 ? _a : false;
    }
    get omitFiltered() {
        var _a;
        return (_a = this.explicitValues.omitFiltered) !== null && _a !== void 0 ? _a : false;
    }
}
exports.PreprocessorConfiguration = PreprocessorConfiguration;
async function resolve(searchFrom) {
    const result = await (0, cosmiconfig_1.cosmiconfig)("cypress-cucumber-preprocessor").search(searchFrom);
    if (result) {
        const { config: rawConfig } = result;
        if (typeof rawConfig !== "object" || rawConfig == null) {
            throw new Error(`Malformed configuration, expected an object, but got ${util_1.default.inspect(rawConfig)}`);
        }
        const config = Object.assign({}, ...Object.entries(rawConfig).map((entry) => validateConfigurationEntry(...entry)));
        (0, debug_1.default)(`resolved configuration ${util_1.default.inspect(config)}`);
        return new PreprocessorConfiguration(config);
    }
    else {
        (0, debug_1.default)("resolved no configuration");
        return new PreprocessorConfiguration({});
    }
}
exports.resolve = resolve;
