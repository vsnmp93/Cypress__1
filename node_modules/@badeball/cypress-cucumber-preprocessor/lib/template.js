"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compile = void 0;
const path_1 = __importDefault(require("path"));
const gherkin_1 = require("@cucumber/gherkin");
const messages_1 = require("@cucumber/messages");
const assertions_1 = require("./assertions");
const preprocessor_configuration_1 = require("./preprocessor-configuration");
const step_definitions_1 = require("./step-definitions");
const type_guards_1 = require("./type-guards");
const { stringify } = JSON;
async function compile(configuration, data, uri = this.resourcePath) {
    const options = {
        includeSource: false,
        includeGherkinDocument: true,
        includePickles: true,
        newId: messages_1.IdGenerator.uuid(),
    };
    const relativeUri = path_1.default.relative(configuration.projectRoot, uri);
    const envelopes = (0, gherkin_1.generateMessages)(data, relativeUri, options);
    if (envelopes[0].parseError) {
        throw new Error((0, assertions_1.assertAndReturn)(envelopes[0].parseError.message, "Expected parse error to have a description"));
    }
    const gherkinDocument = (0, assertions_1.assertAndReturn)(envelopes.map((envelope) => envelope.gherkinDocument).find(type_guards_1.notNull), "Expected to find a gherkin document amongst the envelopes.");
    const pickles = envelopes.map((envelope) => envelope.pickle).filter(type_guards_1.notNull);
    const preprocessor = await (0, preprocessor_configuration_1.resolve)();
    const stepDefinitions = await (0, step_definitions_1.getStepDefinitionPaths)({
        cypress: configuration,
        preprocessor,
    }, uri);
    const prepareLibPath = (...parts) => stringify(path_1.default.join(__dirname, ...parts));
    const createTestsPath = prepareLibPath("create-tests");
    const registryPath = prepareLibPath("registry");
    return `
    const { default: createTests } = require(${createTestsPath});
    const { withRegistry } = require(${registryPath});

    const registry = withRegistry(() => {
      ${stepDefinitions
        .map((stepDefintion) => `require(${stringify(stepDefintion)});`)
        .join("\n    ")}
    });

    registry.finalize();

    createTests(
      registry,
      ${stringify(data)},
      ${stringify(gherkinDocument)},
      ${stringify(pickles)},
      ${preprocessor.messages.enabled},
      ${preprocessor.omitFiltered}
    );
  `;
}
exports.compile = compile;
