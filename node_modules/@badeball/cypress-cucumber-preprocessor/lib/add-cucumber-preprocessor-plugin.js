"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const child_process_1 = __importDefault(require("child_process"));
const chalk_1 = __importDefault(require("chalk"));
const tag_expressions_1 = __importDefault(require("@cucumber/tag-expressions"));
const gherkin_1 = require("@cucumber/gherkin");
const messages_1 = require("@cucumber/messages");
const cypress_configuration_1 = require("@badeball/cypress-configuration");
const constants_1 = require("./constants");
const preprocessor_configuration_1 = require("./preprocessor-configuration");
const type_guards_1 = require("./type-guards");
const environment_helpers_1 = require("./environment-helpers");
async function addCucumberPreprocessorPlugin(on, config) {
    const preprocessor = await (0, preprocessor_configuration_1.resolve)();
    const messagesPath = path_1.default.join(config.projectRoot, preprocessor.messages.output);
    const jsonPath = path_1.default.join(config.projectRoot, preprocessor.json.output);
    on("before:run", async () => {
        if (!preprocessor.messages.enabled) {
            return;
        }
        await fs_1.promises.rm(messagesPath, { force: true });
    });
    on("after:run", async () => {
        if (!preprocessor.messages.enabled) {
            return;
        }
        try {
            await fs_1.promises.access(messagesPath, fs_1.constants.F_OK);
        }
        catch (_a) {
            return;
        }
        const messages = await fs_1.promises.open(messagesPath, "r");
        try {
            const json = await fs_1.promises.open(jsonPath, "w");
            try {
                const child = child_process_1.default.spawn(preprocessor.json.formatter, {
                    stdio: [messages.fd, json.fd, "inherit"],
                });
                await new Promise((resolve, reject) => {
                    child.on("exit", (code) => {
                        if (code === 0) {
                            resolve();
                        }
                        else {
                            reject(new Error(`${preprocessor.json.formatter} exited non-successfully`));
                        }
                    });
                    child.on("error", reject);
                });
            }
            finally {
                await json.close();
            }
        }
        finally {
            await messages.close();
        }
    });
    let currentTestStepStartedId;
    let currentSpecMessages;
    on("before:spec", () => {
        currentSpecMessages = [];
    });
    on("after:spec", async (_spec, results) => {
        if (!preprocessor.messages.enabled || !currentSpecMessages) {
            return;
        }
        const wasRemainingSkipped = results.tests.some((test) => { var _a; return (_a = test.displayError) === null || _a === void 0 ? void 0 : _a.match(constants_1.HOOK_FAILURE_EXPR); });
        if (wasRemainingSkipped) {
            console.log(chalk_1.default.yellow(`  Hook failures can't be represented in JSON reports, thus none is created for ${_spec.relative}.`));
        }
        else {
            await fs_1.promises.writeFile(messagesPath, currentSpecMessages
                .map((message) => JSON.stringify(message))
                .join("\n") + "\n", {
                flag: "a",
            });
        }
    });
    on("after:screenshot", async (details) => {
        if (!preprocessor.messages.enabled || !currentSpecMessages) {
            return details;
        }
        let buffer;
        try {
            buffer = await fs_1.promises.readFile(details.path);
        }
        catch (_a) {
            return details;
        }
        const message = {
            attachment: {
                testStepId: currentTestStepStartedId,
                body: buffer.toString("base64"),
                mediaType: "image/png",
                contentEncoding: "BASE64",
            },
        };
        currentSpecMessages.push(message);
        return details;
    });
    on("task", {
        [constants_1.TASK_APPEND_MESSAGES]: (messages) => {
            if (!currentSpecMessages) {
                return;
            }
            currentSpecMessages.push(...messages);
            return true;
        },
        [constants_1.TASK_TEST_STEP_STARTED]: (testStepStartedId) => {
            if (!currentSpecMessages) {
                return;
            }
            currentTestStepStartedId = testStepStartedId;
            return true;
        },
        [constants_1.TASK_CREATE_STRING_ATTACHMENT]: ({ data, mediaType, encoding }) => {
            if (!currentSpecMessages) {
                return;
            }
            const message = {
                attachment: {
                    testStepId: currentTestStepStartedId,
                    body: data,
                    mediaType: mediaType,
                    contentEncoding: encoding,
                },
            };
            currentSpecMessages.push(message);
            return true;
        },
    });
    const tags = (0, environment_helpers_1.getTags)(config.env);
    if (tags !== null && preprocessor.filterSpecs) {
        const node = (0, tag_expressions_1.default)(tags);
        config.testFiles = (0, cypress_configuration_1.getTestFiles)(config).filter((testFile) => {
            const content = fs_1.default.readFileSync(testFile).toString("utf-8");
            const options = {
                includeSource: false,
                includeGherkinDocument: false,
                includePickles: true,
                newId: messages_1.IdGenerator.incrementing(),
            };
            const envelopes = (0, gherkin_1.generateMessages)(content, testFile, options);
            const pickles = envelopes
                .map((envelope) => envelope.pickle)
                .filter(type_guards_1.notNull);
            return pickles.some((pickle) => { var _a, _b; return node.evaluate((_b = (_a = pickle.tags) === null || _a === void 0 ? void 0 : _a.map((tag) => tag.name).filter(type_guards_1.notNull)) !== null && _b !== void 0 ? _b : []); });
        });
    }
    return config;
}
exports.default = addCucumberPreprocessorPlugin;
